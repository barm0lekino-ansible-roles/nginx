---
#  - name: Update apt cache
#    apt: update_cache=yes

  - name: Check for certificate
    stat:
      #path: "{{ le_ssl_dir }}/{{ hostname[0] }}.{{ domain_name }}/fullchain.pem"
      path: "{{ le_ssl_dir }}/{{ inventory_hostname_short }}.{{ domain_name }}/fullchain.pem"
    register: stat_fullchain_pem
    tags: ["ssl-cert", "create-cert"]

  - debug: var=inventory_hostname_short
    tags: ["ssl-cert", "create-cert"]
  - debug: var=ansible_hostname
    tags: ["ssl-cert", "create-cert"]
#  - debug: var=hostvars
#    tags: ["ssl-cert", "create-cert"]

  - debug: "stat_fullchain_pem.stat.exists: {{ stat_fullchain_pem.stat.exists }} ansible_hostname: {{ inventory_hostname_short }}"
    tags: ["ssl-cert", "create-cert"]

  - name: Get new certificate
    block:
    
    - name: Install ppa:certbot/certbot repo
      apt_repository:
        repo: "{{ item }}"
        state: present
        update_cache: yes
      with_items:
        - "deb http://archive.ubuntu.com/ubuntu/ bionic universe"
        - "ppa:certbot/certbot"
      tags: ["ssl-cert"]

    - name: Install Certbot.
      package:
        name: "{{ item }}"
        state: present
      with_items:
        - "software-properties-common"
        - "certbot"
        - "python-certbot-nginx"
      tags: ["ssl-cert"]

    - name: Creates directory
      file:
        path: "{{ item }}"
        state: directory
        owner: www-data
        group: www-data
      with_items:
        - "{{ le_acme_dir }}"
        - "{{ le_root_directory }}"
        - /var/tmp/nginx
      tags: ssl-cert, create-cert
      
    # Перенос конфигов во временную папку
    - name: Copy configs to temp
      copy:
        remote_src: True
        src: "/etc/nginx/conf.d"
        dest: "/var/tmp/nginx/conf.d"
      tags: ssl-cert

    - name: Collect files
      find:
        paths: /etc/nginx/conf.d
        patterns: "*"
      register: files_to_delete

    - name: Remove configs #####
      file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ files_to_delete.files }}"
      tags: ssl-cert

    # Копируем временный конфиг для получения сертификата
    - name: Update le nginx configs
      template:
        src: le.conf.j2
        dest: /etc/nginx/conf.d/le.conf
        owner: www-data
        group: www-data
        mode: 0644
      #notify: Reload nginx
      #when: stat_fullchain_pem.stat.exists == 0
      tags: ssl-cert, create-cert

    - name: Reload nginx
      service:
        name: nginx
        state: reloaded
      tags: ssl-cert, create-cert

    - name: Get SSL certificate
      #shell: certbot certonly --agree-tos -d {{ item }} --webroot -w {{ le_root_directory }} -m {{ le_email }} {% if le_dry_run %}--dry-run{% endif %}
      shell: certbot certonly --agree-tos -d {{ inventory_hostname_short }}.{{ domain_name }} --webroot -w {{ le_root_directory }} -m {{ le_email }} {% if le_dry_run %}--dry-run{% endif %}
      #when: stat_fullchain_pem.stat.exists == 0 #stat_fullchain_pem.stat.exists == 0
      notify: Reload nginx
      tags: ["ssl-cert", "create-cert"]

    - name:  Cron update SSL certificate
      cron:
        name: "Update SSL certificate"
        month: 2
        job: root certbot renew #{% if le_dry_run %} --dry-run {% endif %}
        state: present
      when:
        #- stat_fullchain_pem.stat.exists == 0
        - le_dry_run == 0
      tags: ["ssl-cert", "create-cert"]

      # Временный конфиг больше не нужен, переменуем его в два шага
    - name: Copy le.conf with new name
      copy:
        remote_src: True
        src: "/etc/nginx/conf.d/le.conf"
        dest: "/etc/nginx/conf.d/le.conf_"
      tags: ssl-cert

    - name: Remove le.conf
      file:
        path: "/etc/nginx/conf.d/le.conf"
        state: absent
      with_items:
        - "{{ inventory_hostname_short }}"
      tags: ssl-cert

    # Перенос конфигов из временной папки обратно
    - name: Copy configs to temp
      copy:
        remote_src: True
        src:  "/var/tmp/nginx/conf.d/"
        dest: "/etc/nginx/conf.d"
          
    - name: Remove configs #####
      file:
        path: "/var/tmp/nginx/conf.d"
        state: absent
      tags: ssl-cert

    # block
    when: stat_fullchain_pem.stat.exists == 0 
